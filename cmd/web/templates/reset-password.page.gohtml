{{ template "base" . }}

{{ define "title" }}
Recover your password
{{ end }}


{{ define "content" }}

<h2>Reset Your Password?</h2>
<hr>
  <p>Please reset your password below.
  </p>
  <form
    autocomplete="off"
    name="reset_form"
    id="reset_form"
    class="d-block needs-validation"
    novalidate=""
  >

  <input type="hidden" id="email" value="{{ index .Data "email"}}">
  <input type="hidden" id="email_hash" value="{{ index .Data "email_hash"}}">


  <div class="mb-3 nval">
    <label for="password" class="form-label">New Password</label>
    <input type="password" class="form-control"
        id="password" name="password"
        required="" autocomplete="password-new"
    >
    <div class="errors text-danger d-none"></div>
  </div>

  <div class="mb-3 nval">
    <label for="password-verify" class="form-label">Verify Password</label>
    <input type="password" class="form-control"
        id="password-verify" name="password-verify"
        required="" autocomplete="password-new"
    >
    <div class="errors text-danger d-none"></div>
  </div>


  <a href="javascript:void(0)"
     id="reset-button"
     class="btn btn-primary"
     onClick="val()">Set New Password</a>
  </form>

{{ end }}

{{ define "js" }}
<script>
  const loginMessages = document.getElementById("card-messages");
  function setResetFunc(parent) {
     const rFunc = function(evt) {
       const errBlock = parent.querySelector(".errors");
       if (errBlock) {
         if (evt.target.validationMessage) {
           errBlock.innerText = evt.target.validationMessage;
         }
         else {
           errBlock.classList.add("d-none");
         }
       }
     }
     return rFunc;
  }

   function showError(msg) {
        loginMessages.classList.add("alert-danger");
        loginMessages.classList.remove("alert-success");
        loginMessages.classList.remove("d-none");
        loginMessages.innerText = msg;
    }

    function showSuccess(msg="Password has been reset") {
        loginMessages.classList.remove("alert-danger");
        loginMessages.classList.add("alert-success");
        loginMessages.classList.remove("d-none");
        loginMessages.innerText = msg;
    }

  function checkPasswordMatch() {
    const pw = document.getElementById("password").value;
    const pwvDom = document.getElementById("password-verify");
    if (pw !== pwvDom.value) {
      pwvDom.setCustomValidity("Entered passwords must match");
    } else {
      pwvDom.setCustomValidity("");
    }
  }


function val() {
  let form = document.getElementById("reset_form");
  checkPasswordMatch();
  if (form.checkValidity() === false) {
      this.event.preventDefault();
      this.event.stopPropagation();
      form.classList.add("was-validated");
      const elems = form.querySelectorAll("div.nval");
      for (let elem of elems) {
        const control = elem.querySelector(":invalid");
        if (control && control.validationMessage) {
          const errBlock = elem.querySelector(".errors");
          if (errBlock) {
            errBlock.innerText = control.validationMessage;
            errBlock.classList.remove("d-none");
            control.onchange = setResetFunc(elem);
          }
        }
      }
      return;
  }
  form.classList.add("was-validated");


const payload = {
  email: document.getElementById("email").value,
  email_hash: document.getElementById("email_hash").value,
  password: document.getElementById("password").value,
};

const requestOptions = {
      method: 'post',
      headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload),
  }

   fetch("{{ .API }}/api/reset-password", requestOptions)
    .then(response => response.json())
    .then(response => {
        if(!response.error) {
          showSuccess("Your password has been reset.");
          setTimeout(() => {
            location.href = "/login";
          }, 2000);
        } else {
          showError(response.message);
        }
    });
}

</script>
{{ end }}