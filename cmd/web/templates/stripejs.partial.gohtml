{{define "stripejs"}}

{{ $widget := index .Data "widget" }}
{{ $recurring := false }}

{{ if $widget }}
  {{ $recurring = $widget.IsRecurring }}
{{ end }}

<script src="https://js.stripe.com/v3/"></script>

<script>
  const stripe_key = "{{ index .StringMap "STRIPE_KEY" }}";
  let stripe;
  let card;
  const cardMessages = document.getElementById("card-messages");
  const payButton = document.getElementById("pay-button");
  const processing = document.getElementById("processing-payment");

  stripe = Stripe(stripe_key);

  function hidePayButton() {
    payButton.classList.add("d-none");
    processing.classList.remove("d-none");
  }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

   function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

  {{ if not $widget }}
    async function completeVTTransaction(result) {
      const payload = {
        payment_method: result.paymentIntent.payment_method,
        payment_intent: result.paymentIntent.id,
        payment_amount: result.paymentIntent.amount,
        payment_currency: result.paymentIntent.currency,
      };

      const headers = new Headers();
      const { token } = getTokenData();
      headers.append("Accept", "application/json");
      headers.append("Content-Type", "application/json");
      headers.append("Authorization", `Bearer ${token}`)

      const requestOptions = {
          method: "POST",
          headers,
          body: JSON.stringify(payload),
      };
      let resp;
      try {
        resp = await fetch("{{ .API }}/api/auth/vterm-success-handler", requestOptions);
        const txn = await resp.json();
        console.log(txn);
        showCardSuccess("Transaction completed");
        const receipt = document.getElementById("receipt");
        receipt.classList.remove("d-none");
        const bankCode = document.getElementById("bank-return-code");
        bankCode.innerText = txn.bank_return_code;

      }
      catch (err) {
         console.log("resp:", resp);
         showCardError("Problem completing transaction: " + err);
      }
    }

  {{ end }}


  function setResetFunc(parent) {
     const rFunc = function(evt) {
       const errBlock = parent.querySelector(".errors");
       if (errBlock) {
         if (evt.target.validationMessage) {
           errBlock.innerHTML = evt.target.validationMessage;
         }
         else {
           errBlock.classList.add("d-none");
         }
       }
     }
     return rFunc;
  }

  function validateElem(elem) {
      const control = elem.querySelector(":invalid");
      if (control && control.validationMessage) {
        // console.log(`${control.name}: ${control.validationMessage}`);
        const errBlock = elem.querySelector(".errors");
        if (errBlock) {
          errBlock.innerHTML = control.validationMessage;
          errBlock.classList.remove("d-none");
          control.onchange = setResetFunc(elem);
        }
      }
  }

  function initValidation() {
      console.log("initialized!");
      let form = document.getElementById("charge_form");
      const elems = form.querySelectorAll("div.nval");
      const validator = function(elem) {
          const input = elem.querySelector("input");
          return function(evt) {
            input.checkValidity();
            setResetFunc(elem);
            validateElem(elem);
          }
      }

      for (let elem of elems) {
        const input = elem.querySelector("input");
        input.addEventListener("input", validator(elem));
        input.addEventListener("blur", validator(elem));
      }
  }

  function val() {
      let form = document.getElementById("charge_form");
      if (form.checkValidity() === false) {
          this.event.preventDefault();
          this.event.stopPropagation();
          form.classList.add("was-validated");
          const elems = form.querySelectorAll("div.nval");
          for (let elem of elems) {
            validateElem(elem);
          }
          return;
      }
      form.classList.add("was-validated");

      hidePayButton();
      let amountToCharge = Math.round(parseFloat(document.getElementById("amount").value) * 100)

    {{ if $recurring }}

       stripe.createPaymentMethod({
         type: "card",
         card: card,
         billing_details: {
          email: document.getElementById("email").value
         }
       }).then(stripePaymentMethodHandler);

       function stripePaymentMethodHandler(rslt) {
          if (rslt.error) {
            showCardError(rslt.error.message);
          } else {
            // create customer and subscribe.
            let payload = {
              product_id:  document.getElementById("product_id").value,
              plan: '{{$widget.PlanID}}',
              payment_method: rslt.paymentMethod.id,
              email: document.getElementById("email").value,
              last_four: rslt.paymentMethod.card.last4,
              card_brand: rslt.paymentMethod.card.brand,
              exp_month: rslt.paymentMethod.card.exp_month,
              exp_year: rslt.paymentMethod.card.exp_year,
              first_name: document.getElementById("first-name").value,
              last_name: document.getElementById("last-name").value,
              amount: amountToCharge,
              currency: "cad", // Put into widget table
            };
            const requestOptions = {
                  method: 'post',
                  headers: {
                      'Accept': 'application/json',
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(payload),
              };

              fetch("{{ .API }}/api/create-customer-and-subscribe-to-plan", requestOptions)
                  .then(response => response.json())
                  .then(function(data) {
                    console.log(data);
                    processing.classList.add("d-none");

                    // Stuff our data into session_storage
                    sessionStorage.setItem("first_name", payload.first_name)
                    sessionStorage.setItem("last_name", payload.last_name)
                    sessionStorage.setItem("amount", "${{ formatCurrency $widget.Price }}")
                    sessionStorage.setItem("last_four", payload.last_four)
                    sessionStorage.setItem("card_brand", payload.card_brand)
                    sessionStorage.setItem("item", "{{$widget.Name}}")
                    sessionStorage.setItem("description", "{{$widget.Description}}")

                    location.href = "/receipt/bronze";
                  });
          }
       }

      {{ else }}
        let payload = {
            amount: amountToCharge,
            currency: 'cad',
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload),
        }

        const endPoint = "{{ .API }}/api/payment-intent";

        fetch(endPoint, requestOptions)
            .then(response => response.text())
            .then(response => {
                let data;
                try {
                    data = JSON.parse(response);
                      stripe.confirmCardPayment(data.client_secret, {
                          payment_method: {
                              card: card,
                              billing_details: {
                                  name: document.getElementById("cardholder-name").value,
                              }
                          }
                      }).then(function(result) {
                          if (result.error) {
                              // card declined, or something went wrong with the card
                              showCardError(result.error.message);
                              showPayButtons();
                          } else if(result.paymentIntent) {
                              if (result.paymentIntent.status === "succeeded") {
                                  // we have charged the card
                                  processing.classList.add("d-none");
                                  showCardSuccess();
                                  //
                                  {{ if $widget }}
                                    // console.log(JSON.stringify(result.paymentIntent))
                                    const {id, payment_method, currency } = result.paymentIntent;
                                    document.getElementById("payment_amount").value = amountToCharge;
                                    document.getElementById("payment_intent").value = id;
                                    document.getElementById("payment_method").value = payment_method;
                                    document.getElementById("payment_currency").value = currency;
                                    document.getElementById("charge_form").submit();
                                  {{ else }}
                                    completeVTTransaction(result);
                                  {{end}}
                              }
                          }
                      })
                } catch (err) {
                    console.log("data:", data);
                    console.log(err);
                    console.log(response);
                    showCardError("Invalid response from payment gateway!");
                    showPayButtons();
                }
            });

    {{end}}
          }


    (function() {
        // Set up change handlers for other form
        // elements
        initValidation();

        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };
       // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: false,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
              displayError.classList.add('d-none');
              displayError.textContent = '';
            }
        });
    })();
  </script>



{{ end }}