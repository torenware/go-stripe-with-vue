
{{ template "base" . }}

{{ define "title"}}
  Sales Summary
{{ end }}

{{ define "css"}}
  <style>
    li.current a  {
      background-color: lightcyan;
    }

    a.disabled {
      color: lightgray;
      pointer-events: none;
    }
  </style>
{{end }}

{{ define "content"}}
    <h2 class="ht-3">Sales Summary</h2>
    <table class="table table-striped">
      <thead>
        <th>Order</th>
        <th>Date</th>
        <th>Item</th>
        <th>TXN ID</th>
        <th>Amount</th>
        <th>Last Four</th>
        <th>Customer</th>
        <th>Status</th>
      </thead>
      <tbody id="sales-rows"></tbody>
    </table>
    <nav aria-label="navigation">
      <ul id="pagination" class="pagination">
      </ul>
    </nav>
{{ end }}

{{ define "js"}}
  <script>
    function LocalDate(dateStr) {
      const date = new Date(dateStr);
      return date.toLocaleDateString();
    }

    let pageSize = 3;
    let currentPage = 1;

    function fillPagination(currPage, lastPage) {
      const maxTabs = 5;
      const drawPageItem = (page) => {
        let currPageClass = "";
         if (currPage === page) {
           currPageClass = "current";
         }
         return `<li class="page-item ${currPageClass}"><a class="page-link" data-page="${page}" href="#">${page}</a></li>\n`;
       }
      let firstTab = 1;
      let lastTab = Math.min(lastPage + 1, firstTab + maxTabs);
      console.log("indexes:", firstTab, lastTab);
      let tabBuf = `<li id="prev-pgn" class="page-item"><a class="page-link" data-page="${currPage - 1}" href="#">Previous</a></li>`;
      for (let t = firstTab; t < lastTab; t++ ) {
        tabBuf += drawPageItem(t);
      }
      tabBuf += `<li id="next-pgn" class="page-item"><a class="page-link" data-page="${currPage + 1}" href="#">Next</a></li>`;
      const paginator = document.getElementById("pagination");
      paginator.innerHTML = tabBuf;

      for (let link of paginator.querySelectorAll("li a")) {
        const itemNum = link.getAttribute("data-page");
        if (itemNum > 0 && itemNum <= lastPage) {
          link.addEventListener("click", evt => {
            doIt(pageSize, parseInt(itemNum));
          });
        } else {
          link.classList.add("disabled");
        }
      }

    }

    const doIt = async (pageSize=3, desiredPage=1) => {
      let rows = [];
      const {token} = getTokenData();
      const payload = {
        page_size: pageSize,
        current_page: desiredPage,
      };

      const requestOptions = {
        method: 'post',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      }
      try {
        const rslt = await fetch("{{ .API }}/api/auth/list-sales", requestOptions);
        const data = await rslt.json();
        const {rows: orders, last_page: lastPage, total_rows: totalRows, current_page: currentPage} = data;
        rows = orders;

        const tbody = document.getElementById("sales-rows");

        let row;
        if (rows === null) {
          row = tbody.insertRow();
          let cell = row.insertCell();
          cell.setAttribute("colspan", "8");
          cell.innerText = "No orders currently available.";
        } else {
          tbody.innerHTML = "";
          rows.forEach(rw => {
            row = tbody.insertRow();
            let cell = row.insertCell()
            cell.innerHTML = `<a href="/admin/order/${rw.id}">${rw.id}</a>`;
            cell = row.insertCell()
            cell.innerText = LocalDate(rw.created_at);
            cell = row.insertCell()
            cell.innerText = rw.widget.name;
            cell = row.insertCell()
            cell.innerText = rw.transaction_id;
            cell = row.insertCell()
            cell.innerText = formatAsCurrency(rw.amount);
            cell = row.insertCell()
            cell.innerText = rw.transaction.last_four;
            cell = row.insertCell()
            cell.innerText = `${rw.customer.last_name}, ${rw.customer.first_name}`;
            cell = row.insertCell()

            let badge = "";
            switch (rw.status_id) {
              case 1:
                badge = `<span class="badge bg-success">Charged</span>`;
                break;
              case 2:
                badge = `<span class="badge bg-danger">Refunded</span>`;
                break;
            }
            cell.innerHTML = badge;
          });

          fillPagination(currentPage, lastPage);

        }
      }
      catch(err) {
        console.log("threw: ", err)
        showCardError(err)
      }

    }
    doIt(pageSize, currentPage);
  </script>
{{ end }}