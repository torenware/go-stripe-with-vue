{{ template "base" . }}

{{ define "title" }}
  Virtual Terminal
{{ end }}


{{ define "content" }}
  <h2 class="mt-3 text-center">The Virtual Terminal</h2>
  <hr>
  <div class="alert alert-danger text-center d-none" id="card-messages"></div>
  <form
    action="/payment-succeeded"
    autocomplete="off"
    name="charge_form"
    id="charge_form"
    class="d-block needs-validation charge-form"
    novalidate=""
  >

  <div class="mb-3 nval">
    <label for="amount" class="form-label">Amount</label>
    <input type="number" class="form-control dollars"
        id="amount" name="amount"
        required="" autocomplete="amount-new"
    >
    <div class="errors text-danger d-none"></div>
  </div>

  <div class="mb-3 nval">
    <label for="cardholder-name" class="form-label">Cardholder Name</label>
    <input type="text" class="form-control"
        id="cardholder-name" name="cardholder-name"
        required="" autocomplete="cardholder-name-new"
    >
    <div class="errors text-danger d-none"></div>
  </div>

  <div class="mb-3 nval">
    <label for="amount" class="form-label">Email</label>
    <input type="email" class="form-control"
        id="email" name="email"
        required="" autocomplete="email-new"
    >
    <div class="errors text-danger d-none"></div>
  </div>

  <!-- card number field controlled by stripe js -->
  <div class="mb-3">
    <label for="card-element" class="form-label">CC Number</label>
    <div id="card-element" class="form-control"></div>
    <div id="card-errors" class="alert-danger text-center"></div>
    <div id="card-success" class="alert-success text-center"></div>
  </div>

  <hr>

  <a href="javascript:void(0)"
     id="pay-button"
     class="btn btn-primary"
     onClick="val()">Charge Card</a>

  <div id="processing-payment" class="text-center d-none">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
  </div>

  </form>
{{ end }}


{{ define "js" }}
  <script src="https://js.stripe.com/v3/"></script>
  <script>
  const stripe_key = "{{ index .StringMap "STRIPE_KEY" }}";
  console.log("SK:", stripe_key)
  let stripe;
  let card;
  const cardMessages = document.getElementById("card-messages");
  const payButton = document.getElementById("pay-button");
  const processing = document.getElementById("processing-payment");

  stripe = Stripe(stripe_key);

  function hidePayButton() {
    payButton.classList.add("d-none");
    processing.classList.remove("d-none");
  }



  function setResetFunc(parent) {
     const rFunc = function(evt) {
       console.log("fired");
       const errBlock = parent.querySelector(".errors");
       if (errBlock) {
         console.log("have eblock", evt);
         if (evt.target.validationMessage) {
           errBlock.innerHTML = evt.target.validationMessage;
         }
         else {
           errBlock.classList.add("d-none");
         }
       }
     }
     return rFunc;
  }

  function val() {
      console.log("trigger validation");
      let form = document.getElementById("charge_form");
      if (form.checkValidity() === false) {
          this.event.preventDefault();
          this.event.stopPropagation();
          form.classList.add("was-validated");
          const elems = form.querySelectorAll("div.nval");
          for (let elem of elems) {
            const control = elem.querySelector(":invalid");
            if (control && control.validationMessage) {
              console.log(`${control.name}: ${control.validationMessage}`);
              const errBlock = elem.querySelector(".errors");
              if (errBlock) {
                errBlock.innerHTML = control.validationMessage;
                errBlock.classList.remove("d-none");
                control.onchange = setResetFunc(elem);
              }
            }
          }
          return;
      }
      form.classList.add("was-validated");
      hidePayButton();
  }

    (function() {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };
       // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: false,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
              displayError.classList.add('d-none');
              displayError.textContent = '';
            }
        });
    })();
  </script>
{{ end }}
